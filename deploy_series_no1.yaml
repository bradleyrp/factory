### REFERENCE

dockerfiles:
  copy_run_script: |
    COPY script.sh script.sh
    CMD ["bash","script.sh"]
  stretch: |
    FROM debian:stretch
  debian start: |
    ARG DEBIAN_FRONTEND=noninteractive
    RUN apt-get update --fix-missing
    RUN apt-get install -y git make wget vim screen
    RUN apt-get install -y procps
    RUN apt-get install -y python python-dev
    ENV PYTHONIOENCODING UTF-8
  debian_mysql: |
    RUN apt-get install -y mysql-server default-libmysqlclient-dev
  debian_compilers: |
    RUN apt-get install -y cmake
    RUN apt-get install -y build-essential
  debian_expose_ports: |
    EXPOSE 22
    EXPOSE 8000
    EXPOSE 8888
  debian_shell_bash: |
    SHELL ["/bin/bash", "--login", "-c"]
  make_user:
    # formats for subs: key, val, python function, builtin function
    subs: #
      user: rpb
      uid: 501
      user_passwd: secret
      gid: 20
      gname: staff
    text: |
      RUN getent group %(gid)s > /dev/null 2>&1 || (groupmod -g %(gid)d %(gname)s)
      RUN useradd -m -u %(uid)d -g %(gid)d %(user)s
      RUN echo '%(user)s:%(user_passwd)s' | chpasswd
      USER %(user)s
      WORKDIR /home/%(user)s

deploy_linux_factory:
  persist: true
  # use the macos disk image utility to make a case-insensitive volume
  site: /Volumes/site-nix/site-factory-linux
  # note that redeployment always reruns the conda env update command
  script: |
    # this script can repeat to confirm the installation
    git clone https://github.com/bradleyrp/factory factory
    cd factory
    git pull
    if [ ! -f Miniconda3-latest-Linux-x86_64.sh ]; then 
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      ln -s Miniconda3-latest-Linux-x86_64.sh miniconda.sh
    fi
    # bootstrap the config
    make
    # make the environment or update if reqs.yaml has changed
    make env conda_py2
  rebuild: false
  dockerfile:
    sequence:
      - stretch
      - debian_start
      - debian_mysql
      - debian_shell_bash
      - debian_expose_ports
      - make_user
    addendum:
      #! needs shell substitution
      - WORKDIR /home/rpb/extern
  compose:
    version: '3'
    services:
      # use: docker-compose run visit
      visit:
        build:
          context: '.'
        volumes:
            - ./:/home/rpb/extern
        stdin_open: true
        tty: true
        command: ['/bin/bash']
        ports:
          # host:container
          - "8020:8000"
          - "8021:8888"
          - "8022:22"
        network_mode: host 
      # use: docker-compose up deploy
      deploy:
        entrypoint: ['/bin/bash','script.sh']
        build:
          context: '.'
        volumes:
            - ./:/home/rpb/extern
  command: docker-compose up deploy

deploy_linux_factory_visit:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports visit
    rebuild: false

deploy_linux_factory_rebuild:
  # docker-compose does not rebuild on Dockerfile changes so you have to ask
  via: deploy_linux_factory
  overrides:
    rebuild: true

### LOCAL/NATIVE tests
### these tests run inside the parent factory

no2:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    #! bug: note that `make go protein` fails in this context but not typically
    make prep protein
    python -u script.py

no2_prep:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    make set activate_env="../../env/bin/activate py2"
    echo "ready to run: 'make go protein' at $(pwd)"


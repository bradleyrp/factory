### REFERENCE

# segments of Dockerfile
dockerfiles:
  copy_run_script: |
    COPY script.sh script.sh
    CMD ["bash","script.sh"]
  stretch: |
    FROM debian:stretch
  debian start: |
    ARG DEBIAN_FRONTEND=noninteractive
    RUN apt-get update --fix-missing
    RUN apt-get install -y git make wget vim screen
    RUN apt-get install -y procps
    RUN apt-get install -y python python-dev
    ENV PYTHONIOENCODING UTF-8
  debian_mysql: |
    RUN apt-get install -y mysql-server default-libmysqlclient-dev
  debian_compilers: |
    RUN apt-get install -y cmake
    RUN apt-get install -y build-essential
  debian_expose_ports: |
    EXPOSE 22
    EXPOSE 8000
    EXPOSE 8888
  debian_shell_bash: |
    SHELL ["/bin/bash", "--login", "-c"]
  make_user:
    # formats for subs: key, val, python function, builtin function
    subs: #
      user: rpb
      uid: 501
      user_passwd: secret
      gid: 20
      gname: staff
    text: |
      RUN getent group %(gid)s > /dev/null 2>&1 \
          || (groupmod -g %(gid)d %(gname)s)
      RUN useradd -m -u %(uid)d -g %(gid)d %(user)s
      RUN echo '%(user)s:%(user_passwd)s' | chpasswd
      USER %(user)s
      WORKDIR /home/%(user)s
  gromacs-2018.3: |
    WORKDIR /root
    RUN apt-get install -y libfftw3-dev
    RUN wget ftp://ftp.gromacs.org/pub/gromacs/gromacs-2018.3.tar.gz
    RUN tar xvf gromacs-2018.3.tar.gz
    WORKDIR /root/gromacs-2018.3
    RUN mkdir build
    WORKDIR /root/gromacs-2018.3/build
    RUN cmake /root/gromacs-2018.3
    RUN make -j 2
    RUN make install
    WORKDIR /root

JUNK: |
  ### INCOMING DOCKER FILES NEED FOLDED IN
  
  dockerfile_gromacs = """
  WORKDIR /root
  RUN apt-get install -y libfftw3-dev
  RUN wget ftp://ftp.gromacs.org/pub/gromacs/gromacs-5.1.2.tar.gz
  RUN tar xvf gromacs-5.1.2.tar.gz
  RUN rm gromacs-5.1.2.tar.gz
  WORKDIR /root/gromacs-5.1.2
  RUN mkdir build
  WORKDIR /root/gromacs-5.1.2/build
  RUN cmake /root/gromacs-5.1.2
  RUN make -j 4
  RUN make install
  WORKDIR /root
  """

  dockerfile_debian_apache = """
  WORKDIR /root/
  RUN apt-get install -y apache2
  RUN apt-get install -y apache2-dev
  """

  dockerfile_debian_vmd = """
  ARG DEBIAN_FRONTEND=noninteractive
  RUN apt-get install -y libglu1 libxinerama1 libxi6 libgconf-2-4 imagemagick
  WORKDIR /root
  COPY VMD_SOURCE /root/
  RUN mkdir vmd-latest
  RUN tar xvf VMD_SOURCE -C vmd-latest --strip-components=1
  WORKDIR /root/vmd-latest
  RUN ./configure
  WORKDIR /root/vmd-latest/src
  RUN make install
  """

  dockerfile_debian_ffmpeg = """
  WORKDIR /root/
  RUN echo "deb http://www.deb-multimedia.org stretch main non-free" >> /etc/apt/sources.list
  RUN apt-get update
  RUN apt-get install --allow-unauthenticated -y deb-multimedia-keyring 
  RUN apt-get update
  RUN apt-get install -y ffmpeg x264
  """

  dockerfile_debian_gotty = """
  WORKDIR /root/
  RUN mkdir /usr/local/gotty
  WORKDIR /usr/local/gotty
  RUN wget https://github.com/yudai/gotty/releases/download/v1.0.1/gotty_linux_amd64.tar.gz
  RUN tar xvf gotty_linux_amd64.tar.gz
  """

  dockerfile_debian_node = """
  WORKDIR /root/
  RUN apt-get install curl
  RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -
  RUN apt-get install nodejs npm
  WORKDIR /root/
  """

  dockerfile_debian_sshd = """
  WORKDIR /root/
  RUN apt-get install -y openssh-server
  RUN sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/' /etc/ssh/sshd_config
  RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
  ENV NOTVISIBLE "in users profile"
  RUN echo "export VISIBLE=now" >> /etc/profile
  EXPOSE 22
  RUN useradd -m @USER
  RUN usermod -s /bin/bash @USER
  RUN echo @USER:@read_config('user_creds') |chpasswd
  ENTRYPOINT service ssh restart && sleep infinity
  """

# easy commands
#! note that overrides ability could eventually be replaced with kwargs
#!   which would allow kwargs to override some flags, but this would require
#!   hooks but would reduce the YAML spec
interface:
  central:
    args:
      notebook: factory_notebook

### macos utilities (see hooks/macdrive.py)
macos_unmount:
  call: hdiutil detach /Volumes/site-nix

### DEPLOY IN DOCKER

factory_rebuild:
  via: deploy_linux_factory
  overrides:
    rebuild: true

factory_visit:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports visit

factory_notebook:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy
    script: |
      cd factory
      source env/bin/activate py2
      jupyter notebook --port=8888 --no-browser --ip=0.0.0.0

#! need recursion so you can use this (see no4 below)
factory_do:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy

deploy_linux_factory:
  # hook to check mounts if we must run in an external volume
  prelim: "@deploy_site"
  persist: true
  # use the macos disk image utility to make a case-insensitive volume
  site: /Volumes/site-nix/site-factory-linux
  # note that redeployment always reruns the conda env update command
  script: |
    # this script can repeat to confirm the installation
    git clone https://github.com/bradleyrp/factory factory
    cd factory
    git pull
    if [ ! -f Miniconda3-latest-Linux-x86_64.sh ]; then 
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      ln -s Miniconda3-latest-Linux-x86_64.sh miniconda.sh
    fi
    # bootstrap the config
    make
    # make the environment or update if reqs.yaml has changed
    make env conda_py2
  rebuild: false 
  dockerfile:
    sequence:
      - stretch
      - debian_start
      - debian_mysql
      - debian_shell_bash
      - make_user
    addendum:
      #! needs shell substitution
      - WORKDIR /home/rpb/extern
  compose:
    version: '3'
    services:
      # use: docker-compose run visit
      visit:
        build: '.'
        volumes:
          - ./:/home/rpb/extern
        stdin_open: true
        tty: true
        command: ['/bin/bash']
        ports:
          - "8888:8888"
      deploy:
        entrypoint: ['/bin/bash','script.sh']
        build: .
        volumes:
          - ./:/home/rpb/extern
        ports:
          - "8888:8888"
  command: docker-compose up -d deploy

factory_build_full:
  via: deploy_linux_factory
  overrides:
    rebuild: true
    dockerfile:
      sequence:
        - stretch
        - debian_start
        - debian_mysql
        - debian_shell_bash
        - debian_compilers
        - gromacs-2018.3
        - make_user
      addendum:
        #! needs shell substitution
        - WORKDIR /home/rpb/extern

### LOCAL/NATIVE tests
### these tests run inside the parent factory

no2:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    #! bug: note that `make go protein` fails in this context but not typically
    make prep protein
    python -u script.py

no2_prep:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    make set activate_env="../../env/bin/activate py2"
    echo "ready to run: 'make go protein' at $(pwd)"

demo_omni:
  script: |
    # assumes connections/demo.yaml
    make connect demo

no3:
  #! site: test-no3
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho_clean test
    cd test
    make setup all
    cd inputs/proteins && git checkout ortho_clean && cd ../..
    make prep protein
    python -u script.py

### DOCKER TESTS
### these tests run inside a Docker (see above)

no4:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy
    script: |
      set -e
      source factory/env/bin/activate py2
      source /usr/local/gromacs/bin/GMXRC.bash
      this=test-$(date +%Y%m%d%H%M)
      git clone https://github.com/biophyscode/automacs -b ortho_clean $this
      cd $this
      make setup all
      cd inputs/proteins && git checkout ortho_clean && cd ../..
      make prep protein
      #! python -u script.py

#! debugging import ortho;ortho.bash('gmx',log='log',cwd='.')

### REFERENCE

# segments of Dockerfile
dockerfiles:
  copy_run_script: |
    COPY script.sh script.sh
    CMD ["bash","script.sh"]
  stretch: |
    FROM debian:stretch
  debian_start: |
    ARG DEBIAN_FRONTEND=noninteractive
    RUN apt-get -y update
    RUN apt-get install -y git make wget vim screen
    RUN apt-get install -y procps
    RUN apt-get install -y python python-dev
    ENV PYTHONIOENCODING UTF-8
  debian_mysql: |
    RUN apt-get install -y mysql-server default-libmysqlclient-dev
  debian_compilers: |
    RUN apt-get install -y cmake
    RUN apt-get install -y build-essential
    RUN apt-get install -y m4
    RUN apt-get install -y automake
    RUN apt-get install -y libtool
  debian_expose_ports: |
    EXPOSE 22
    EXPOSE 8000
    EXPOSE 8888
  debian_apache:
    RUN apt-get install -y apache2 apache2-dev
  debian_shell_bash: |
    SHELL ["/bin/bash", "--login", "-c"]
  make_user:
    # formats for subs: key, val, python function, builtin function
    subs:
      user: rpb
      uid: 501
      user_passwd: secret
      gid: 20
      gname: staff
    text: |
      RUN getent group %(gid)s > /dev/null 2>&1 \
          || (groupmod -g %(gid)d %(gname)s)
      RUN useradd -m -u %(uid)d -g %(gid)d %(user)s
      RUN echo '%(user)s:%(user_passwd)s' | chpasswd
      USER %(user)s
      WORKDIR /home/%(user)s
  gromacs-2018.3: |
    WORKDIR /root
    RUN apt-get install -y libfftw3-dev
    RUN wget ftp://ftp.gromacs.org/pub/gromacs/gromacs-2018.3.tar.gz
    RUN tar xvf gromacs-2018.3.tar.gz
    WORKDIR /root/gromacs-2018.3
    RUN mkdir build
    WORKDIR /root/gromacs-2018.3/build
    RUN cmake /root/gromacs-2018.3
    RUN make -j 2
    RUN make install
    WORKDIR /root
  singularity: |
    WORKDIR /root
    RUN apt-get install -y squashfs-tools
    RUN apt-get install -y libarchive-dev
    RUN git clone https://github.com/singularityware/singularity.git
    WORKDIR /root/singularity
    RUN git checkout vault/release-2.6
    RUN ./autogen.sh
    RUN ./configure --prefix=/usr/local
    RUN make
    RUN make install

# easy commands
#! note that overrides ability could eventually be replaced with kwargs
#!   which would allow kwargs to override some flags, but this would require
#!   hooks but would reduce the YAML spec
interface:
  central:
    args:
      notebook: factory_notebook

### macos utilities (see hooks/macdrive.py)
macos_unmount:
  call: hdiutil detach /Volumes/site-nix

### DEPLOY IN DOCKER

factory_rebuild:
  via: deploy_linux_factory
  overrides:
    rebuild: true

factory_visit:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports visit

factory_notebook:
  via: deploy_linux_factory
  overrides:
    command: docker-compose up -d deploy
    script: |
      cd factory
      source env/bin/activate py2
      jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 

factory_notebook_live:
  # run the notebook in the foreground
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy
    script: |
      cd factory
      source env/bin/activate py2
      jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 

#! need recursion so you can use this (see no4 below)
factory_do:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy

factory_build_full:
  via: deploy_linux_factory
  overrides:
    rebuild: true
    dockerfile:
      sequence:
        - stretch
        - debian_start
        - debian_mysql
        - debian_shell_bash
        - debian_compilers
        - gromacs-2018.3
        - make_user
      addendum:
        #! needs shell substitution
        - WORKDIR /home/rpb/extern

factory_build:
  # run the build script below to ensure factory exists without rebuilding image
  via: deploy_linux_factory
  overrides:
    command: docker-compose run deploy

deploy_linux_factory:
  # see factory_* recipes above rather than using this directly
  # hook to check mounts if we must run in an external volume
  #! move this prelim to a macos flavored version via "via" version or it will fail on linux
  prelim: "@deploy_site"
  #! not currently used in formula.py?
  persist: true
  # use the macos disk image utility to make a case-insensitive volume
  #! disambiguate this and prelim for deployment on other linux machines
  site: /Volumes/site-nix/
  # note that redeployment always reruns the conda env update command
  script: |
    if [ -d factory ]; then echo "[STATUS] factory already exists" && exit 0; fi
    # this script can repeat to confirm the installation
    git clone https://github.com/bradleyrp/factory factory
    cd factory
    git pull
    if [ ! -f Miniconda3-latest-Linux-x86_64.sh ]; then 
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      ln -s Miniconda3-latest-Linux-x86_64.sh miniconda.sh
    fi
    # bootstrap the config
    make
    # make the environment or update if reqs.yaml has changed
    make env conda_py3
  #! note that if you want to build this, you should run factory_build
  #!   since this recipe is just the parent
  rebuild: false 
  dockerfile:
    sequence:
      - stretch
      - debian_start
      - debian_compilers
      - debian_mysql
      - debian_shell_bash
      - make_user
    addendum:
      #! needs shell substitution
      - WORKDIR /home/rpb/extern
  compose:
    version: '3'
    services:
      # use: docker-compose run visit
      visit:
        build: .
        image: factory:deploy_linux_factory
        volumes:
          - ./:/home/rpb/extern
        stdin_open: true
        tty: true
        command: ['/bin/bash']
        ports:
          - "8888:8888"
        container_name: factory_visit
      deploy:
        entrypoint: ['/bin/bash','script.sh']
        build: .
        image: factory:deploy_linux_factory
        volumes:
          - ./:/home/rpb/extern
        ports:
          - "8888:8888"
        hostname: factory_remote
        container_name: factory_deploy
      site:
        entrypoint: ['/bin/bash']
        build: .
        image: factory:deploy_linux_factory
        volumes:
          - ./:/home/rpb/extern
        ports:
          - "8000:8000"
        hostname: factory_site
        container_name: factory_site
  command: docker-compose up -d deploy

factory_connect:
  via: deploy_linux_factory
  overrides:
    script: |
      cd factory
      make connect actinlink
    command: docker-compose run site # up -d site
    compose:
      version: '3'
      services:
        # use: docker-compose run visit
        site:
          build: .
          image: factory:deploy_linux_factory
          volumes:
            # note that dot means site here, because we run from there
            - ./:/home/rpb/extern
            #! hardcoded for now. use the connection file
            - /Users/rpb/worker/factory/connections/actinlink.yaml:/home/rpb/extern/factory/connections/actinlink.yaml
            #! paths used in actinlink.yaml hardcoded above
            - /Users/rpb/worker/post-factory-demo:/home/rpb/worker/post-factory-demo
          stdin_open: true
          tty: true
          command: ['/bin/bash']
          ports:
            - "8888:8888"
            - "8000:8000"
          container_name: factory_site

#! under development. run things in connect first
#! we need recursion for via! this is very similar to the above
factory_up:
  via: deploy_linux_factory
  overrides:
    #command: docker-compose up -d site # up -d site
    command: docker-compose run --service-ports site # up -d site
    compose:
      version: '3'
      services:
        # use: docker-compose run visit
        site:
          build: .
          image: factory:deploy_linux_factory
          volumes:
            # note that dot means site here, because we run from there
            - ./:/home/rpb/extern
            #! hardcoded for now. use the connection file
            - /Users/rpb/worker/factory/connections/actinlink.yaml:/home/rpb/extern/factory/connections/actinlink.yaml
            #! paths used in actinlink.yaml hardcoded above
            - /Users/rpb/worker/post-factory-demo:/home/rpb/worker/post-factory-demo
          stdin_open: true
          tty: true
          #entrypoint: ['/usr/bin/make','-C','~/extern/factory','run','actinlink']
          ports:
            - "8888:8888"
            - "8000:8000"
            - "8001:8001"
          container_name: factory_site
          entrypoint: ['/bin/bash','script.sh']
    script: |
      cd factory
      rm -f pid* TASK_QUEUE
      make connect actinlink
      make run actinlink public
      sleep infinity

### LOCAL/NATIVE tests
### these tests run inside the parent factory

no2:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    #! bug: note that `make go protein` fails in this context but not typically
    make prep protein
    python -u script.py

no2_prep:
  site: test-no2
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho test
    cd test
    make 
    make gromacs_config local
    make setup all
    make set activate_env="../../env/bin/activate py2"
    echo "ready to run: 'make go protein' at $(pwd)"

demo_omni:
  script: |
    # assumes connections/demo.yaml
    make connect demo

no3:
  #! site: test-no3
  script: |
    set -e
    git clone https://github.com/biophyscode/automacs -b ortho_clean test
    cd test
    make setup all
    cd inputs/proteins && git checkout ortho_clean && cd ../..
    make prep protein
    python -u script.py
  site: /Users/rpb/dumbspot

### DOCKER TESTS
### these tests run inside a Docker (see above)

no4:
  via: deploy_linux_factory
  overrides:
    command: docker-compose run --service-ports deploy
    script: |
      set -e
      source factory/env/bin/activate py2
      source /usr/local/gromacs/bin/GMXRC.bash
      this=test-$(date +%Y%m%d%H%M)
      git clone https://github.com/biophyscode/automacs -b ortho_clean $this
      cd $this
      make setup all
      cd inputs/proteins && git checkout ortho_clean && cd ../..
      make prep protein
      #! python -u script.py

### SINGULARITY via DOCKER on macos

#! custom for macos right now
vagrant_setup:
  site: ~/worker/vagrant-springboard
  singularity_version: 2.6

docker_singularity:
  # hook to check mounts if we must run in an external volume
  #! move this prelim to a macos flavored version via "via" version or it will fail on linux
  prelim: "@deploy_site"
  persist: true
  # use the macos disk image utility to make a case-insensitive volume
  #! disambiguate this and prelim for deployment on other linux machines
  site: /Volumes/site-nix/site-factory-linux
  rebuild: false 
  #! script, deploy service entrypoint, and the up command with detach (-d)
  #!   flag are all probably unnecessary. the script runs in detach and the
  #!   entire purpose of this recipe is to parent the docker_singularity_rebuild
  #!   and hence set the stage for the other derived recipes
  script: |
    echo "docker_singularity is built!"
  dockerfile:
    sequence:
      - stretch
      - debian_start
      - debian_compilers
      - debian_mysql
      - debian_shell_bash
      - singularity
      #! must be root - make_user
    addendum:
      #! needs shell substitution
      - WORKDIR /home/rpb/extern
  compose:
    version: '3'
    services:
      # use: docker-compose run visit
      visit:
        build: .
        image: factory:docker_singularity
        volumes:
          - ./:/home/rpb/extern
        stdin_open: true
        tty: true
        command: ['/bin/bash']
        ports:
          - "8888:8888"
        container_name: docker_singularity_visit
      deploy:
        entrypoint: ['/bin/bash','script.sh']
        build: .
        image: factory:docker_singularity
        volumes:
          - ./:/home/rpb/extern
        ports:
          - "8888:8888"
        container_name: docker_singularity_deploy
  command: docker-compose up -d deploy

docker_singularity_rebuild:
  via: docker_singularity
  overrides:
    rebuild: true
  
docker_singularity_visit:
  via: docker_singularity
  overrides:
    command: docker-compose run --service-ports visit

docker_singularity_makerspace:
  ### recipe for making Singularity containers
  via: docker_singularity
  overrides:
    command: sudo docker-compose run --service-ports visit
    compose:
      version: '3'
      services:
        # use: docker-compose run visit
        visit:
          build: .
          image: factory:docker_singularity
          volumes:
            - ./:/home/rpb/extern
          stdin_open: true
          tty: true
          command: ['/bin/bash']
          ports:
            - "8888:8888"
          privileged: true
        deploy:
          entrypoint: ['/bin/bash','script.sh']
          build: .
          image: factory:docker_singularity
          volumes:
            - ./:/home/rpb/extern
          ports:
            - "8888:8888"
  notes: |
    make repl source=deploy_series_no1.yaml name=docker_singularity_makerspace
    cd /home/rpb/extern/singularity-makerspace
    singularity image.create container.simg
    cat > Singularity
      BootStrap: docker
      From: centos:centos7
      OSVersion: 7
      MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/
      Include: yum
      %runscript
      echo "welcome"
      exec echo "Hello World" "$@"
      %post
      echo "Ready to install software and other dependencies for the container!"
      yum -y update
      yum -y install git
      yum -y groupinstall "Development Tools"
    singularity build container.simg Singularity


### HEARTLAND RECIPES
### These recipes deploy codes for the Trayanova lab.
### By: Ryan Bradley
### Circa 2020 January

### DOCKER

dockerfiles: !merge_spec
  external: !import_spec 
    from: ./specs/recipes/heart_dockerfiles.yaml
    what: dockerfiles

#! move the dockerfile sequences somewhere more convenient?

dockerfile_carp_meshalyzer: &dockerfile_carp_meshalyzer
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_meshalyzer
    - emacs26
    - jdk-14
    - clojure
    - godot
    - ubuntu_mkl
    # video rendering requirements follow
    - ffmpeg
    - parallel
    - xvfb
    - vtk820
    - python-numpy
    - user_sudo_ubuntu
    - carp_license
    - vertigo_lein_user

dockerfile_carp_meshalyzer_opencarp: &dockerfile_carp_meshalyzer_opencarp
  # note that this cannot coexist with Carpentry or you get errors downstream
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - emacs26
    - jdk-14
    - clojure
    - godot
    - ubuntu_mkl
    # video rendering requirements follow
    - ffmpeg
    - parallel
    - xvfb
    - vtk820
    # insert this before user
    - opencarp_v7_deb
    - user_sudo_ubuntu
    - vertigo_lein_user

dockerfile_carp_mesh_basic_bionic: &dockerfile_carp_mesh_basic_bionic
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_meshalyzer
    - x11
    - grace_gnuplot
    - user_sudo_ubuntu
    - carp_license

dockerfile_carp_mesh_basic: &dockerfile_carp_mesh_basic
  series:
    - focal
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_meshalyzer
    - x11
    - grace_gnuplot
    - user_sudo_ubuntu
    - carp_license

dockerfile_heart_min: &dockerfile_heart_min
  series:
    - bionic
    - ubuntu_build
    - jdk-14
    - clojure
    - user_sudo_ubuntu

dockerfile_heart_min_8: &dockerfile_heart_min_8
  series:
    - bionic
    - ubuntu_build
    - jdk-11
    - user_sudo_ubuntu

dockerfile_carp_source: &dockerfile_carp_source
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_source_reqs
    - user_sudo_ubuntu

dockerfile_carp_source_plus: &dockerfile_carp_source_plus
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_source_reqs
    - user_sudo_ubuntu
    - xmgrace

dockerfile_cgal: &dockerfile_cgal
  series:
    - focal
    - ubuntu_build
    - cgal
    - geomview
    - meshlab
    - user_sudo_ubuntu

dockerfile_vmtk: &dockerfile_vmtk
  series:
    - focal
    - prelim
    - ubuntu_build
    - vmtk_reqs
    - x11
    - cleanup
    - user_sudo_ubuntu
    - anaconda
    - vmtk_prep_conda
    - vmtk_install
    - vmtk_loader

### SETTINGS

# method for running GUI apps on macos
# note that `docker run` requires DISPLAY via the -e flag in the custom command
macos_docker_display: &macos_docker_display >-
  DISPLAY=docker.for.mac.host.internal:0
# factory root location on spacegray macbook
factory-root: &factory-root /Users/rpb/worker/heart/factory
workdir: &workdir /Users/rpb/worker
hearts_code: &directed-graph-code
  !!python/object/apply:os.path.join [*workdir,
  "hearts-code/directed-graph-rotor-analysis"]
  
# central location of the carpentry license file
carpentry_license: &carpentry_license "/home/rpb/work/cardcat/2021.07.00-license-carp/trayanova_license_07_2021.bin"
#! carpentry_license: &carpentry_license "/home/rpb/work/cardcat/2021.06.24-license-carp/license.bin"
#! carpentry_license: &carpentry_license "/home/rpb/work/cardcat/2020.08.20-license-carp/license.bin"
#! carpentry_license: &carpentry_license "/home/rpb/work/cardcat/2020.01.03-license-carp/license.bin"

# RECIPE SELECTION
# select recipe: `make docker specs/recipes/heart.yaml name=<name>`
select: !select

  carp:
    #! prevent this from running directly
    #! confirm linux
    image_name: &image_name_ubuntu heartland:carp_meshalyzer
    command: docker-compose up deploy
    dockerfile: *dockerfile_carp_meshalyzer
    #! using volumes instead of: site: local, spot, darwin_ok
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_ubuntu
          ports:
            - 9011:9011
            - 9012:9012
          environment:
            - DISPLAY=$DISPLAY
          devices:
            - /dev/dri 
            - /dev/snd
            - /dev/nvidia0

  carp_macos:
    #! make an automatic switch for detecting macos?
    #! prevent this from running directly because wrong mounts
    via: carp
    mods:
      # this uses a gui on macos machines via socat
      macos_gui: True
      compose:
        services:
          deploy:
            devices: []
            environment:
              - *macos_docker_display

  dg_ex02:
    #!!! needs tested
    via: carp
    mods:
      visit: true
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            volumes: 
            - source: /home/rpb/work/hearts-code/directed-graph-rotor-analysis
              target: /home/user/code
              type: bind
            - source: /home/rpb/work/hearts-data/2019.12.11-directed-graph-input-example-e01
              target: /home/user/source
              type: bind

  dg_ex03:
    #!!! needs tested
    via: carp_macos
    mods:
      command: docker-compose run --service-ports deploy
      visit: True
      compose:
        services:
          deploy:
            container_name: carp
            volumes: 
            # changed both below from heartland to macbook
            - source: /Users/rpb/worker/heart/dev/directed-graph-rotor-analysis
              target: /home/user/code
              type: bind
            - source: /Users/rpb/worker/heart/hearts-data/2019.12.11-directed-graph-input-example-e01
              target: /home/user/source
              type: bind
  
  vertigo_v02:
    # ok to use
    # macbook deployment
    via: carp_macos
    mods:
      #! this is still visiting! no link to compose folder because visit
      command: docker-compose up -d deploy
      compose:
        services:
          deploy:
            devices: []
            volumes: 
            # using the redeploy site which is currently deprecated
            - source: /Users/rpb/worker/heart/2020.01.22-vertigo-redeploy
              target: /home/user/spot
              type: bind
            ports:
            - 9011:9011
            - 9012:9012
            - 9020:9020
            entrypoint:
              '/bin/bash -c "cd /home/user/spot/vertigo && 
              source /usr/local/carp-1.1/config.sh && 
              lein repl :headless :host 0.0.0.0 :port 9020"'

  vertigo_v02_visit:
    # ok to use
    # macbook deployment, visit
    notes: |
      This is a canonical visit recipe, piggybacking off of another recipe.
    via: vertigo_v02
    mods:
      visit: true
      compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      command: docker-compose run --service-ports deploy

  vertigo_v03:
    # heartland deployment
    via: vertigo_v02
    mods: 
      compose:
        services:
          deploy:
            volumes: 
            - source: /home/rpb/work/hearts-data/2020.01.25-vertigo-v03
              target: /home/user/spot/data
              type: bind
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind

  vertigo_v03_visit:
    # heartland visit
    via: carp
    mods: 
      visit: true
      compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            volumes: 
            - source: /home/rpb/work/hearts-data/2020.01.25-vertigo-v03
              target: /home/user/spot/data
              type: bind
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix
            ports: []

  min:
    # a minimal testing environment
    image_name: &image_name_min heartland:basic
    command: docker-compose run --service-ports deploy
    dockerfile: *dockerfile_heart_min_8
    visit: True
    compose:
      version: '3.7'
      services:
        deploy:
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_min
          volumes: 
          - source: *factory-root
            target: /home/user/extern
            type: bind

  vertigo_v04_visit_deprecated:
    via: carp
    mods: 
      visit: true
      #! compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            volumes: 
            - source: /home/rpb/work/hearts-data/2020.02.03-test-4surf-atria-f-M15_400
              target: /home/user/spot/data
              type: bind
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix
            ports: []

  paraview:
    image_name: &image_name_paraview heartland:paraview
    command: docker-compose run --service-ports deploy
    visit: true
    dockerfile: 
      raw: |
        FROM kitware/paraview:pvw-v5.8.0-osmesa-py3
        RUN apt-get update -y
        RUN apt-get install -y python3-venv
        RUN apt-get install -y libatlas-base-dev
        RUN rm -rf /var/lib/apt/lists/*
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: paraview
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_paraview
          ports:
            - 9011:9011
            - 9012:9012
          environment:
            - DISPLAY=$DISPLAY
          devices:
            - /dev/dri 
            - /dev/snd
            - /dev/nvidia0
  paraview_macos:
    notes: |
      make docker specs/recipes/heart.yaml paraview_macos
      # install persistent venv 
      cd ~/spot
      #! dev: package the above into the image
      python -m venv ./venv
      export LD_LIBRARY_PATH=/opt/paraview/lib/:$LD_LIBRARY_PATH 
      export PYTHONPATH=/opt/paraview/lib/python3.6/site-packages
      source ./venv/bin/activate
      pip install meshio # requires libatlas-base-dev
      pip install pillow
      pip install wheel
      pip install mayavi
      pip install PyQt5
    via: paraview
    mods:
      macos_gui: True
      compose:
        services:
          deploy:
            working_dir: /root/spot
            environment:
              - *macos_docker_display
            devices: []
            volumes: 
            - source: /Users/rpb/worker/heart/2020.02.20-fiber-data-inspect
              target: /root/spot
              type: bind

  ###
  ### VALIDATED EXPERIMENTS
  ###

  # EXECUTE: VERTIGO v04
  # vertigo_v04 and children run atrial_af
  vertigo_v04:
    notes: |
      Tested on 2020.02.05 on heartland (a desktop) via:
        `make docker specs/recipes/heart.yaml name=vertigo_v04`
      Code via: factory@bbfeef, vertigo@f1cf53.
      This runs in the foreground.
      Lasts ~17min and throws warning `Unexpected end of /proc/mounts line`.
    via: carp
    mods: 
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            volumes: 
            - source: /home/rpb/work/data/2020.02.03-test-4surf-atria-f-M15_400 
              target: /home/user/spot/data
              type: bind
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo &&
              time lein run -- -n block01 runargs docker-v01 expt-v02'
  vertigo_v04_visit:
    via: vertigo_v04
    mods: 
      visit: true
      compose: 
        services:
          deploy:
            entrypoint: /bin/bash -lic 'cd ~/spot/vertigo && lein repl'
  vertigo_v04_inspect:
    via: vertigo_v04_visit
    mods: 
      visit: true
      compose: 
        services:
          deploy:
            entrypoint: /bin/bash -il

  # EXECUTE: directed graph v01
  dg_v01:
    via: carp
    mods:
      visit: true
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            volumes: 
            - source: /home/rpb/work/hearts-code/directed-graph-rotor-analysis
              target: /home/user/code
              type: bind
            - source: /home/rpb/work/hearts-data/2019.12.11-directed-graph-input-example-e01
              target: /home/user/source
              type: bind

  ###
  ### Legacy Carp Installation
  ###

  carp_legacy_compile:
    notes: |
      Compile carp via: https://gitlab.com/natalia-trayanova/carp-1.8-legacy
      Compiling locally. Note that we have to do this locally because the
      source is proprietary and we download it from github.
      This image only supplies the supporting software.
      You must use `carp_builder.sh` and compile in a local volume.
      We use the local factory root as an external volume.
      Not yet tested on macos, but it should work there as well.
    site:
      darwin_ok: true
      local: ./
    image_name: &carp_source_image heartland:carp_source
    command: docker-compose run --service-ports deploy
    visit: true
    dockerfile: *dockerfile_carp_source
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *carp_source_image

  ###
  ### Macbook carp recipes
  ###

  carpentry_mac:
    notes: |
      This recipe runs carpentry with meshalyzer on a mac.
      It tentatively includes GUI programs including xmgrace and gnuplot.
      It also provides meshalyzer however past experience suggests that this
        is somewhat buggy and crashes frequently for some reason.
      Beware that we mount the factory root locally with a case-insensitive 
        filesystem, which can cause issues in some applications.
      Features: automatic local mount, GUI programs on macos, carpentry
    macos_gui: true
    image_name: &carpentry_basic heartland:carpentry_basic
    command: docker-compose run -e DISPLAY=docker.for.mac.host.internal:0 --service-ports deploy
    visit: true
    site:
      darwin_ok: true
      local: ./
    dockerfile: *dockerfile_carp_mesh_basic
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *carpentry_basic
          devices: []
          # onetime mount the binary to install
          volumes:
    files:
      - /Users/rpb/worker/heart/sources/cme.linux.tar.gz

  meshalyzer_review_20210810:
    via: carpentry_mac
    mods:
      compose:
        services:
          deploy:
            working_dir: '/home/user/data'
            entrypoint: ['/bin/bash','-l']
            volumes:
              - source: /Users/rpb/worker/heart/2021.08.10-uac2-opencarp-compare
                target: /home/user/data
                type: bind
            deploy:
              resources:
                limits:
                  cpus: "4.0"
                  memory: 40G
                reservations:
                  cpus: "4.0"
                  memory: 40G

  ###
  ### CGAL Containers
  ###

  cgal_mac:
    notes: |
      Started on 2020.08.13 to look into cgal.
    macos_gui: true
    image_name: &image_cgal heartland:cgal
    command: docker-compose run -e DISPLAY=docker.for.mac.host.internal:0 --service-ports deploy
    visit: true
    site:
      darwin_ok: true
      local: ./
    dockerfile: *dockerfile_cgal
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_cgal
          devices: []

  ###
  ### MAKE VIDEOS
  ###

  videos:
    notes: |
      Reproduce make_videos portion of the pipeline.
      Critical note about xauth, firewalls, etc. When using ssh, docker, 
      and X11, you need several items in combination.
        - Correct DISPLAY variable for your session
        - The DISPLAY number must match the `auth list` number i.e. `/10`
        - Otherwise you might need to log in again or get a new ~/.Xauthority
        - You need `network_mode: host` or else you might have routing or
          firewall problems of some kind.
        - Some sites recommend socat.
    command: /usr/local/bin/docker-compose run --service-ports deploy
    image_name: &image_videos heartland:carp_meshalyzer
    dockerfile: *dockerfile_carp_meshalyzer
    visit: true
    site:
      darwin_ok: true
      local: ./
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          # critical for docker X11 over ssh
          network_mode: host
          build: .
          image: *image_name_ubuntu
          ports:
            - 9011:9011
            - 9012:9012
          environment:
            - DISPLAY=$DISPLAY
            #- XAUTHORITY=$XAUTH
          devices:
            - /dev/dri 
            - /dev/snd
            - /dev/nvidia0
          volumes:
            - /tmp/.X11-unix:/tmp/.X11-unix
            # critical for docker X11 over ssh
            - ${HOME}/.Xauthority:/home/user/.Xauthority

  videos_mac_debug:
    via: videos
    mods:
      macos_gui: true
      compose:
        version: '3.7'
        services:
          deploy:
            devices: []
            environment:
              - *macos_docker_display

  ###
  ### VERTIGO EXAMPLE
  ###

  carp_nogpu:
    notes: Override the NVIDIA devices.
    via: carp
    mods: {compose: {services: {deploy: {devices: []}}}}

  # EXECUTE: VERTIGO vXX example
  vertigo_vXX:
    notes: |
      The following is an example recipe. You should copy the entire block 
      and update the paths below, and replace XX with a number. Then run:
        make docker specs/recipes/heart.yaml name=vertigo_vXX
      See the vertigo_v04_visit and vertigo_v04_inspect recipes for debugging.
    via: carp_nogpu
    mods: 
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            # the following will automatically point to paths above
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo &&
              time lein run -- -n block01 runargs docker-v01 expt-general'
            environment:
              - VERTIGO_REF_NAME=atria_f
              - VERTIGO_TARGET_NAME=M15_400
            volumes: 
              # MODIFY: set the carpentry_license path in a variable
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
              # MODIFY: add the path to the data here
            - source: /home/rpb/work/data/2020.02.03-test-4surf-atria-f-M15_400
              target: /home/user/spot/data
              type: bind
              # MODIFY: add the path to the code here
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix

  vertigo_v10:
    via: carp_nogpu
    mods: 
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            # the following will automatically point to paths above
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo && export 
              LD_LIBRARY_PATH=/usr/java/packages/lib:/usr/lib/jvm/java-16-oracle/lib/:$LD_LIBRARY_PATH && 
              source /usr/local/carp-1.1/config.sh && 
              time lein run -- -n block01 runargs docker-v01 expt-general'
            environment:
              - VERTIGO_REF_NAME=DTMRI_LA_1_RA_avg
              - VERTIGO_TARGET_NAME=P6
            volumes: 
              # MODIFY: set the carpentry_license path in a variable
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
              # MODIFY: add the path to the data here
            - source: /home/rpb/work/data/2021.07.22-uac2-test/test-4surf-DTMRI-P6.igb-reader
              target: /home/user/spot/data
              type: bind
              # MODIFY: add the path to the code here
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix
  vertigo_v10_inspect:
    via: vertigo_v10
    mods: 
      visit: true
      compose: 
        services:
          deploy:
            entrypoint: /bin/bash -il

  vertigo_v11:
    via: carp_nogpu
    mods: 
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            container_name: carp_visit
            # the following will automatically point to paths above
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo && export 
              LD_LIBRARY_PATH=/usr/java/packages/lib:/usr/lib/jvm/java-16-oracle/lib/:$LD_LIBRARY_PATH && 
              source /usr/local/carp-1.1/config.sh && 
              time lein run -- -n block01 runargs docker-v01 expt-general'
            environment:
              - VERTIGO_REF_NAME=atria_f
              - VERTIGO_TARGET_NAME=M15_400
            volumes: 
              # MODIFY: set the carpentry_license path in a variable
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
              # MODIFY: add the path to the data here
            - source: /home/rpb/work/data/2020.02.03-test-4surf-atria-f-M15_400
              target: /home/user/spot/data
              type: bind
              # MODIFY: add the path to the code here
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix

  vertigo_v12:
    via: carp_nogpu
    mods: 
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            deploy:
              resources:
                limits:
                  cpus: "4.0"
                  memory: 40G
                reservations:
                  cpus: "4.0"
                  memory: 40G
            container_name: carp_visit
            # the following will automatically point to paths above
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo && export 
              LD_LIBRARY_PATH=/usr/java/packages/lib:/usr/lib/jvm/java-16-oracle/lib/:$LD_LIBRARY_PATH && 
              source /usr/local/carp-1.1/config.sh && 
              time lein run -- -n block01 runargs docker-v01 expt-general'
            environment:
              - VERTIGO_REF_NAME=DTMRI_LA_1_RA_avg
              - VERTIGO_TARGET_NAME=P324
            volumes: 
              # MODIFY: set the carpentry_license path in a variable
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
              # MODIFY: add the path to the data here
              # via: rsync -e 'ssh -p 58020' -arivP rbradle8@utz.icm.jhu.edu:/xanadu/data/sali46/UAC2-example-tutorial/FINAL-test-4surf-DTMRI-P324/ 2021.08.03-test-vertigo/
            - source: /home/rpb/work/data/2021.08.03-test-vertigo
              target: /home/user/spot/data
              type: bind
              # MODIFY: add the path to the code here
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix

  opencarp:
    notes: this is specific to the vertigo_opencarp_vXX below
    #! prevent this from running directly
    #! confirm linux
    image_name: &image_name_ubuntu_compare heartland:carp_compare
    command: docker-compose up deploy
    dockerfile: *dockerfile_carp_meshalyzer_opencarp
    #! using volumes instead of: site: local, spot, darwin_ok
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: opencarp_visit
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_ubuntu_compare
          ports:
            - 9011:9011
            - 9012:9012
          environment:
            - DISPLAY=$DISPLAY
          devices:
            - /dev/dri 
            - /dev/snd
            - /dev/nvidia0

  # EXECUTE: VERTIGO vXX comparison with CARPentry and openCARP
  vertigo_opencarp_vXX:
    notes: |
      In this example we attempt to swap openCARP in for CARPentry.
    via: opencarp
    mods: 
      dockerfile: *dockerfile_carp_meshalyzer_opencarp
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            devices: []
            container_name: opencarp_visit
            # the following will automatically point to paths above
            #! this is not overwriting the original recipe!!!
            entrypoint: >-
              /bin/bash -lic 'cd ~/spot/vertigo &&
              time lein run -- -n block01 runargs docker-v01 expt-comp-general'
            environment:
              - VERTIGO_REF_NAME=atria_f
              - VERTIGO_TARGET_NAME=M15_400
            volumes: 
              # MODIFY: set the carpentry_license path in a variable
            - source: *carpentry_license
              target: /usr/local/carp-1.1/license.bin
              type: bind
              # MODIFY: add the path to the data here
            - source: /home/rpb/work/data/2020.02.03-test-4surf-atria-f-M15_400
              target: /home/user/spot/data
              type: bind
              # MODIFY: add the path to the code here
            - source: /home/rpb/work/code/vertigo
              target: /home/user/spot/vertigo
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix

  vertigo_opencarp_vXX_visit:
    via: vertigo_opencarp_vXX
    mods:
      command: /usr/local/bin/docker-compose run --service-ports deploy
      compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      visit: true

  # opencarp MWE v01
  vertigo_opencarp_mwe_v01:
    notes: |
      circa 2021.09.09 testing opencarp MWE for the interface to the solver
    via: opencarp
    mods: 
      dockerfile: *dockerfile_carp_meshalyzer_opencarp
      command: docker-compose run --service-ports deploy
      compose:
        services:
          deploy:
            devices: []
            container_name: opencarp_visit
            entrypoint: /bin/bash -l
            volumes: 
            - source: /home/rpb/work/data/2021.09.09-mwe-uac2/
              target: /home/user/spot/data
              type: bind
            - /tmp/.X11-unix:/tmp/.X11-unix
  vertigo_opencarp_mwe_v01_visit:
    via: vertigo_opencarp_mwe_v01
    mods:
      command: /usr/local/bin/docker-compose run --service-ports deploy
      compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      visit: true

  ###
  ### VMTK
  ###

  vmtk_base:
    image_name: &image_name_vmtk heartland:vmtk
    #! command: docker-compose up deploy
    #! use run if yo uare also using visit!
    #! use -e for display
    #! command: docker-compose run --service-ports deploy
    #! command: docker-compose run -e DISPLAY=docker.for.mac.host.internal:0 --service-ports deploy
    command: docker-compose run -e DISPLAY=host.docker.internal:0 --service-ports deploy
    #! beware you need to use run if you are doing a visit
    dockerfile: *dockerfile_vmtk
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: vmtk
          #! entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_vmtk
          ports:
            - 9011:9011
            - 9012:9012
          environment:
            - DISPLAY=$DISPLAY
          # nvidia only:
          # devices:
          #   - /dev/dri 
          #   - /dev/snd
          #   - /dev/nvidia0

  vmtk:
    via: vmtk_base
    mods:
      # this uses a gui on macos machines via socat
      macos_gui: true
      visit: true
        #! restart the laptop after setting "Allow connections from network clients" (not sure that restart is needed but it seems decisive)
        #! after restart, use "xhost +" if you are okay with the security implications
        #!  > access control disabled, clients can connect from any host
        #! then you can run xeyes from the factory per usual
        #! note that socat may be necessary for tunneling an X11 connection from a desktop
      compose:
        services:
          deploy:
            devices: []
            #! socat might be required for X11 over the network
            #! environment:
            #!   - *macos_docker_display
            volumes: 
            - /tmp/.X11-unix:/tmp/.X11-unix
            - source: /Users/rpb/tmp-vmtk-test
              target: /home/user/data
              type: bind

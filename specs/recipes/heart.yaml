dockerfiles: !merge_spec
  external: !import_spec 
    from: ./dockerfiles.yaml
    what: dockerfiles
  local:
    carp_meshalyzer_reqs: |
      # section: install carp and meshalyzer
      RUN apt-get -y update --fix-missing
      RUN apt-get install -y fltk1.3-dev
      RUN apt-get install -y libpng-dev
      RUN apt-get install -y libglew-dev 
      RUN apt-get install -y freeglut3-dev
    carp_meshalyzer: |
      RUN cd /tmp && \
          mkdir -p ./build-carp && \
          mkdir /usr/local/carp-1.1 && \
          cd ./build-carp && \
          wget https://carp.medunigraz.at/carpentry/cme.linux.tar.gz && \
          tar xvf cme.linux.tar.gz && \
          cd cme-1.1-linux && \
          echo "/usr/local/carp-1.1\ny\ny\ny\n" \
          | ./install_linux.sh
      RUN ln -s /usr/local/carp-1.1/meshalyzer/src/meshalyzer /usr/bin/meshalyzer
      # SHELL ["/bin/bash", "-c", "source /usr/local/carp-1.1/config.sh"]
      RUN echo "source /usr/local/carp-1.1/config.sh" >> /etc/bash.bashrc
    carp_license: |
      USER root
      RUN chown user:users /usr/local/carp-1.1/license.bin
      USER user
    emacs26: |
      RUN apt-get install -y software-properties-common
      RUN add-apt-repository -y ppa:kelleyk/emacs
      RUN apt-get install -y emacs26
    jdk-13: |
      RUN apt-get install -y software-properties-common
      RUN add-apt-repository -y ppa:linuxuprising/java
      RUN echo debconf shared/accepted-oracle-license-v1-2 select true | debconf-set-selections
      RUN echo debconf shared/accepted-oracle-license-v1-2 seen true | debconf-set-selections
      RUN apt-get install -y openjdk-13-jdk
    clojure: | # https://github.com/Quantisan/docker-clojure/blob/be736864bf3e6d35c1bc6b13fd2add4a319fb92b/target/openjdk-13-buster/lein/Dockerfile
      ENV LEIN_VERSION=2.9.1
      ENV LEIN_INSTALL=/usr/local/bin/
      WORKDIR /tmp
      RUN \
      mkdir -p $LEIN_INSTALL && \
      wget -q https://raw.githubusercontent.com/technomancy/leiningen/$LEIN_VERSION/bin/lein-pkg && \
      echo "Comparing lein-pkg checksum ..." && \
      sha1sum lein-pkg && \
      echo "93be2c23ab4ff2fc4fcf531d7510ca4069b8d24a *lein-pkg" | sha1sum -c - && \
      mv lein-pkg $LEIN_INSTALL/lein && \
      chmod 0755 $LEIN_INSTALL/lein && \
      wget -q https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip && \
      wget -q https://github.com/technomancy/leiningen/releases/download/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.zip.asc && \
      rm leiningen-$LEIN_VERSION-standalone.zip.asc && \
      mkdir -p /usr/share/java && \
      mv leiningen-$LEIN_VERSION-standalone.zip /usr/share/java/leiningen-$LEIN_VERSION-standalone.jar
      ENV PATH=$PATH:$LEIN_INSTALL
      ENV LEIN_ROOT 1
      # Install clojure 1.10.1 so users don't have to download it every time
      RUN echo '(defproject dummy "" :dependencies [[org.clojure/clojure "1.10.1"]])' > project.clj \
        && lein deps && rm project.clj
    godot: |
      RUN apt-get install -y unzip
      RUN apt-get install -y mesa-utils libgl1-mesa-glx
      WORKDIR /tmp
      RUN wget https://downloads.tuxfamily.org/godotengine/3.1.2/Godot_v3.1.2-stable_x11.64.zip
    ubuntu_mkl: |
      RUN apt-get install -y cpio
      RUN cd /tmp && \
        wget -q http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/15275/l_mkl_2019.3.199.tgz && \
        tar -xzf l_mkl_2019.3.199.tgz && \
        cd l_mkl_2019.3.199 && \
        sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg && \
        sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg && \
        sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg && \
        ./install.sh -s silent.cfg && \
        cd .. && rm -rf * && \
        rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2019.3.199/licensing && \
        echo "/opt/intel/mkl/lib/intel64" >> /etc/ld.so.conf.d/intel.conf && \
        ldconfig && \
        echo "source /opt/intel/mkl/bin/mklvars.sh intel64" >> /etc/bash.bashrc
    vertigo_lein_user: |
      WORKDIR /tmp
      RUN mkdir vertigo_lein_user && cd vertigo_lein_user && echo '(defproject vertigo "0.1.0-SNAPSHOT" :plugins [[lein-git-deps "0.0.1-SNAPSHOT"] [lein-with-env-vars "0.2.0"] [cider/cider-nrepl "0.23.0"]] :git-dependencies [["https://github.com/bmillare/dj3.git"]] :dependencies [[org.clojure/clojure "1.10.0"] [org.bmillare/dj.core "0.2.0"] [com.cemerick/pomegranate "1.1.0"] [org.bmillare/dj.treefn "0.2.0"] [uncomplicate/neanderthal "LATEST"] [nrepl "0.6.0"] [clojure-complete "0.2.5"]])' > project.clj && cat project.clj && lein install
      WORKDIR /home/user

dockerfile_carp_meshalyzer: &dockerfile_carp_meshalyzer
  series:
    - bionic
    - ubuntu_build
    - carp_meshalyzer_reqs
    - carp_meshalyzer
    - emacs26
    - jdk-13
    - clojure
    - godot
    - ubuntu_mkl
    - user_sudo_ubuntu
    - carp_license
    - vertigo_lein_user

# SETTINGS
macos_docker_display: &macos_docker_display >-
  DISPLAY=docker.for.mac.host.internal:0
hearts_data: &hearts_data "/home/rpb/work/hearts-data/"  
# hearts_data: &hearts_data "/Users/rpb/worker/heart/hearts-data/"  
hearts_code: &directed-graph-code >-
  /home/rpb/work/hearts-code/directed-graph-rotor-analysis
# hearts_code: &directed-graph-code >-
#   "/Users/rpb/worker/heart/dev/directed-graph-rotor-analysis"
vertigo: &vertigo /Users/rpb/worker/heart/dev/vertigo
dg-ex01: &dg-ex01 
  !!python/object/apply:os.path.join [*hearts_data,
  "2019.12.11-directed-graph-input-example-e01"]
dg-ex02: &dg-ex02 
  "/Users/rpb/worker/heart/hearts-data/\
  2019.12.11-directed-graph-input-example-e01"

# usage: make docker specs/recipes/heart.yaml name=carp_macos
select: !select

  carp:
    image_name: &image_name_ubuntu heartland:carp_meshalyzer
    command: docker-compose up deploy
    #! previously: command: docker-compose run --service-ports deploy
    # visit runs command (`docker-compose run`) with a tty
    visit: True
    #! using volumes instead of: site: local, spot, darwin_ok
    compose:
      version: '3.7'
      services:
        deploy:
          container_name: carp
          entrypoint: ['/bin/bash','-l']
          build: .
          image: *image_name_ubuntu
          volumes: 
          - source: *directed-graph-code
            target: /home/user/dg
            type: bind
          - source: *dg-ex01
            target: /home/user/data-dg
            type: bind
          - source: *vertigo
            target: /home/user/vertigo
            type: bind
          # - source: *vertigo-ex01
          #   target: /home/user/data-vertigo
          #   type: bind
          - source: /Users/rpb/worker/heart/2020.01.17-fiber-flip/WedgeModel_ScrambledLons_edit
            target: /home/user/data-fiber-flip
            type: bind
          #! linux host
          - /tmp/.X11-unix:/tmp/.X11-unix
          ports:
            - 9011:9011
            - 9012:9012
          #! linux host
          environment:
            - DISPLAY=$DISPLAY
          #! never if you want ports on host: network_mode: "host"
          devices:
            - /dev/dri 
            - /dev/snd
            - /dev/nvidia0
    dockerfile: *dockerfile_carp_meshalyzer

  carp_macos:
    #! make an automatic switch for detecting macos?
    via: carp
    mods:
      # this uses a gui on macos machines via socat
      macos_gui: True
      compose:
        services:
          deploy:
            environment:
              - *macos_docker_display
  dg_ex02:
    via: carp
    mods:
      compose:
        services:
          deploy:
            volumes: 
            - source: *directed-graph-code
              target: /home/user/code
              type: bind
            - source: *dg-ex02
              target: /home/user/source
              type: bind

  vertigo_v02:
    via: carp_macos
    mods:
      #! this is still visiting! no link to compose folder because visit
      command: docker-compose up -d deploy
      compose:
        services:
          deploy:
            devices: []
            volumes: 
            - source: /Users/rpb/worker/heart/2020.01.22-vertigo-redeploy
              target: /home/user/spot
              type: bind
            ports:
            - 9011:9011
            - 9012:9012
            - 9020:9020
            #! automate the installation that occurs on lein repl?
            entrypoint: '/bin/bash -c "cd /home/user/spot/vertigo && source /usr/local/carp-1.1/config.sh && lein repl :headless :host 0.0.0.0 :port 9020"'
  vertigo_v02_visit:
    notes: |
      This is a canonical visit recipe, piggybacking off of another recipe.
    via: vertigo_v02
    mods:
      visit: true
      compose: {services: {deploy: {entrypoint: '/bin/bash -l'}}}
      command: docker-compose run --service-ports deploy
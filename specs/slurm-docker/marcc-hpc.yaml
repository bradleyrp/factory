dockerfiles: 
select: !select
  #! confirm that we check for multiple keys
  testcluster_build: 
    notes: |
      This recipe is for building only. Run this before the allocations recipe.
      Usage: make docker specs/recipes/marcc-hpc.yaml allocations_build
      This code is via: https://github.com/giovtorres/slurm-docker-cluster
    site: !spots root
    visit: True
    image_name: &marcc-hpc-image marcc-hpc:testcluster
    # this command builds the container and then you can run allocations below
    command: docker-compose build --build-arg CACHEBUST=$(date +%s) accounts
    dockerfile: &dockerfile-testcluster
      raw: |
        FROM centos:7
        LABEL org.label-schema.vcs-url="https://github.com/giovtorres/slurm-docker-cluster" \
              org.label-schema.docker.cmd="docker-compose up -d" \
              org.label-schema.name="slurm-docker-cluster" \
              org.label-schema.description="Slurm Docker cluster on CentOS 7" \
              maintainer="Giovanni Torres"
        # ARG SLURM_TAG=slurm-18-08-6-2
        ARG SLURM_TAG=slurm-19-05-0-1
        ARG GOSU_VERSION=1.11
        RUN set -ex \
            && yum makecache fast \
            && yum -y update \
            && yum -y install epel-release \
            && yum -y install \
               wget \
               bzip2 \
               perl \
               gcc \
               gcc-c++\
               git \
               gnupg \
               make \
               munge \
               munge-devel \
               python-devel \
               python-pip \
               python34 \
               python34-devel \
               python34-pip \
               mariadb-server \
               mariadb-devel \
               psmisc \
               bash-completion \
               vim-enhanced \
            && yum clean all \
            && rm -rf /var/cache/yum
        RUN pip install Cython nose && pip3.4 install Cython nose
        RUN set -ex \
            && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" \
            && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64.asc" \
            && export GNUPGHOME="$(mktemp -d)" \
            && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
            && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
            && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
            && chmod +x /usr/local/bin/gosu \
            && gosu nobody true
        RUN set -x \
            && git clone https://github.com/SchedMD/slurm.git \
            && pushd slurm \
            && git checkout tags/$SLURM_TAG \
            && ./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
                --with-mysql_config=/usr/bin  --libdir=/usr/lib64 \
            && make install \
            && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
            && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
            && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
            && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
            && popd \
            && rm -rf slurm \
            && groupadd -r --gid=995 slurm \
            && useradd -r -g slurm --uid=995 slurm \
            && mkdir /etc/sysconfig/slurm \
                /var/spool/slurmd \
                /var/run/slurmd \
                /var/run/slurmdbd \
                /var/lib/slurmd \
                /var/log/slurm \
                /data \
            && touch /var/lib/slurmd/node_state \
                /var/lib/slurmd/front_end_state \
                /var/lib/slurmd/job_state \
                /var/lib/slurmd/resv_state \
                /var/lib/slurmd/trigger_state \
                /var/lib/slurmd/assoc_mgr_state \
                /var/lib/slurmd/assoc_usage \
                /var/lib/slurmd/qos_usage \
                /var/lib/slurmd/fed_mgr_state \
            && chown -R slurm:slurm /var/*/slurm* \
            && /sbin/create-munge-key
        ARG CACHEBUST=1
        # use a basic conf here to mimic a real cluster
        COPY slurm.conf /etc/slurm/slurm.conf
        COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
        COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
        RUN ["chmod", "+x", "/usr/local/bin/docker-entrypoint.sh"]
        ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
        CMD ["slurmdbd"]
    files:
      - specs/slurm-docker/docker-entrypoint.sh
      - source: specs/slurm-docker/slurm.basic.conf
        target: slurm.conf
      - specs/slurm-docker/slurmdbd.conf
    compose:
      version: "3.7"
      services:
        accounts:
          build: .
          image: *marcc-hpc-image
          command: ["slurmd"]
          hostname: accounts
          container_name: accounts
  testcluster:
    notes: |
      Do not build here! Use testcluster_build.
      Objective: deploy an MWE for managing the allocations database
      DEV!!! May require `docker volume prune` until we fix volume creep.
      Requires system prune or the rm before restarting named containers.
      Usage: docker system prune && make docker specs/recipes/marcc-hpc.yaml allocations
      You must build volumes first: for name in etc_munge etc_slurm var_log_slurm var_lib_mysql slurm_jobdir; do docker volume create --name=$name; done
    site: !spots root
    #! the following: image_name,command,dockerfile are irrelevant but required
    image_name: *marcc-hpc-image
    command: docker-compose up -d
    #! this is ignored for multiple services
    dockerfile: *dockerfile-testcluster
    #! we visit and run this in the foreground
    visit: False
    compose:
      version: "3.7"
      services:
        mysql:
          image: mysql:5.7
          hostname: mysql
          container_name: mysql
          environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: slurm_acct_db
            MYSQL_USER: slurm
            MYSQL_PASSWORD: password
          volumes:
            - var_lib_mysql:/var/lib/mysql
        slurmdbd:
          image: *marcc-hpc-image
          command: ["slurmdbd"]
          container_name: slurmdbd
          hostname: slurmdbd
          volumes:
            - etc_munge:/etc/munge
            - etc_slurm:/etc/slurm
            - var_log_slurm:/var/log/slurm
          expose:
            - "6819"
          depends_on:
            - mysql
        slurmctld:
          image: *marcc-hpc-image
          command: ["slurmctld"]
          container_name: slurmctld
          hostname: slurmctld
          volumes:
            - etc_munge:/etc/munge
            - etc_slurm:/etc/slurm
            - slurm_jobdir:/data
            - var_log_slurm:/var/log/slurm
          expose:
            - "6817"
          depends_on:
            - "slurmdbd"
        c1:
          image: *marcc-hpc-image
          command: ["slurmd"]
          hostname: c1
          container_name: c1
          volumes:
            - etc_munge:/etc/munge
            - etc_slurm:/etc/slurm
            - slurm_jobdir:/data
            - var_log_slurm:/var/log/slurm
          expose:
            - "6818"
          depends_on:
            - "slurmctld"
        accounts:
          build: .
          image: *marcc-hpc-image
          command: ["slurmd"]
          # we must use a valid name so slurmd starts
          #! cannot change this but not sure where it exists
          hostname: c2
          container_name: accounts
          volumes:
            - etc_munge:/etc/munge
            - etc_slurm:/etc/slurm
            - slurm_jobdir:/data
            - var_log_slurm:/var/log/slurm
          ports:
            - 6818:6818
            - 5000:5000
          depends_on:
            - "slurmctld"
      volumes:
        # set external volumes to avoid space creep
        etc_munge: {external: true}
        etc_slurm: {external: true}
        slurm_jobdir: {external: true}
        var_lib_mysql: {external: true}
        var_log_slurm: {external: true}

# Rockfish Software Stack via Spack
# USAGE: `make do specs/rockfish.yaml name=test` except where otherwise
select: !select 

  # variables
  vars:
    spec: &spec specs/rockfish/spack_rockfish.yaml
    mirror: &mirror 
      name: !orthoconf [spack_mirror_name, local-mirror]
      spot: !orthoconf [spack_mirror_path, local/spack/mirror-spot]
    prefix: &prefix ~/local/stack

  # RECIPE: create GPG keys
  #! onetime only. needs automated
  #! spack gpg has bugs. clear gpg by removing spack/opt/spack/gpg
  #! this might touch ~/.spack which we disallow
  gpg:
    - !!python/object/apply:os.system ["spack gpg init"]
    - !!python/object/apply:os.system [
      'spack gpg create "Ryan Bradley" "bradleyrp@gmail.com"']

  # RECIPE: build with cache
  # usage: make spack specs/rockfish.yaml cache do=<name>
  cache: 
    - !!python/object/apply:lib.spack.spack_env_install
      kwds:
        spec: *spec
        # cli argument to select the environment name in the spec
        do: !cli do
    - !!python/object/apply:lib.spack.spack_env_cache
      kwds:
        spec: *spec
        cache_mirror: !!python/object/apply:lib.spack.SpackMirror 
          kwds: *mirror
        # cli argument to select the environment name in the spec
        do: !cli do

  # RECIPE: deploy to an install location
  # usage: make spack specs/rockfish.yaml deploy do=<name>
  deploy:
    # deploy to the location
    - !!python/object/apply:lib.spack.spack_install_cache
      kwds:
        spec: *spec
        target: *prefix
        do: !cli do

  # RECIPE: full build including: build, cache, and deploy
  # setup should be run with the following command
  # usage: make spack specs/rockfish.yaml full do=setup
  # usage: make spack specs/rockfish.yaml deploy do=<name>
  #!!! lots of redundancy and repeated commands as the environment is rerun
  go:
    # compile the code
    - !!python/object/apply:lib.spack.spack_env_install
      kwds:
        spec: *spec
        # cli argument to select the environment name in the spec
        do: !cli do
    # create the build cache
    - !!python/object/apply:lib.spack.spack_env_cache
      kwds:
        spec: *spec
        cache_mirror: !!python/object/apply:lib.spack.SpackMirror 
          kwds: *mirror
        # cli argument to select the environment name in the spec
        do: !cli do
    # deploy to the location
    - !!python/object/apply:lib.spack.spack_install_cache
      kwds:
        spec: *spec
        target: *prefix
        do: !cli do

  # RECIPE: inspect an environment
  # this recipe selects on the make_env items in a spack recipe 
  #   and then runs concretize so you can inspect the environment
  live:
    - !!python/object/apply:lib.spack.spack_env_concretize
      kwds:
        spec: *spec
        # cli argument to select the environment name in the spec
        do: !cli do

# BLUE CRAB SOFTWARE STACK 
# Build and organize software for this cluster.
# USAGE: make spack_hpc_run run=specs/spack_hpc_run.yaml deploy=specs/spack_bc_proot.yaml name=bc-prelim live

# SETTINGS: spack source and environments locations 
spot:       ./local/spack       # config.json, spack
spot_envs:  ./local/envs-spack  # config.json, spack_envs

history: |
  Build through stage01 in sequence.
  The stage01 specs can be added one-by-one.
  Build stage02 openmpi with proot on debug because the build nodes lack verbs.
  Continue stage02 build with singularity.

###
### SOFTWARE SPECIFICATION
###

arch: &arch "arch=linux-centos7-haswell"
gcc-back-compiler: &gcc-back-compiler gcc@4.8.5
gcc-back: &gcc-back !strflush ["%", *gcc-back-compiler]
gcc-7-compiler: &gcc-7-compiler gcc@7.4.0
gcc-7: &gcc-7 !strflush ["%", *gcc-7-compiler, " ", *arch]
python3: &python-3 >-
  python@3.7.6 +bz2 +ctypes +dbm +debug 
  +libxml2 +lzma +optimizations +pic +pyexpat +pythoncmd 
  +readline +shared +sqlite3 +ssl +uuid +zlib
r36: &r36 !chain
  - r@3.6.1 +memory_profiling
  - *python-3

wl02: &wl02 !merge_lists
  #! define below because !merge_lists cannot use refs?
  - &r-packages [r-devtools, r-rcpp]
  - &wl01 [gcc, python, r]
  # each target R package must include dependencies in the whitelist
  - &wl-r-devtools [
    r-callr, r-processx, r-ps, r-r6, r-cli, r-assertthat, r-crayon, 
    r-digest, r-git2r, r-httr, r-curl, r-jsonlite, r-mime, r-openssl, 
    r-askpass, r-sys, r-memoise, r-pkgbuild, r-desc, r-rprojroot, 
    r-backports, r-prettyunits, r-magrittr, r-withr, r-pkgload, 
    r-rlang, r-rstudioapi, r-rcmdcheck, r-sessioninfo, r-xopen, 
    r-remotes, r-roxygen2, r-brew, r-commonmark, r-purrr, r-rcpp, 
    r-stringi, r-stringr, r-glue, r-xml2, r-testthat, r-evaluate, 
    r-praise, r-usethis, r-clipr, r-clisymbols, r-fs, r-gh, r-ini, r-whisker, r-yaml]
  # singleton non-MPI packages
  - &base-singletons [
      cmake, fontconfig, freetype] 
  # python-dependent codes
  - &python-deps [cairo]
  # MPI-compiled codes
  - [gromacs, lammps]
  # incidental to MPI-compiled codes
  - [netcdf-c, hdf5]

openmpi-3-1: &openmpi-3-1 >-
  openmpi@3.1.5 %gcc@7.4.0 arch=linux-centos7-haswell
  +cuda +cxx_exceptions fabrics=verbs 
  +legacylaunchers +pmi +vt schedulers=slurm 
  ^slurm@17.11.12 

fftw38: &fftw38 >-
  fftw@3.3.8 +mpi +openmp ~pfft_patches precision=double,float 

lammps: &lammps-v01 >-
  lammps@20190807 +cuda cuda_arch=35
  +asphere +body +class2 +colloid +compress +coreshell
  +dipole +exceptions +ffmpeg +granular +jpeg +kokkos +kspace ~latte +lib +manybody
  +mc +meam +misc +molecule +mpi +mpiio +openmp +peri +png +poems +python +qeq
  +reax +replica +rigid +shock +snap +srd +user-atc +user-h5md +user-lb
  +user-misc +user-netcdf +user-omp +user-reaxc +voronoi
  +user-diffraction 

netcdf-c: &netcdf-c-v01 >-
  netcdf-c@4.7.3 %gcc@7.4.0 ~dap ~hdf4 maxdims=1024 maxvars=8192 
  +mpi ~parallel-netcdf +pic +shared

hdf5: &hdf5-v01 >-
  hdf5@1.10.6 ~cxx ~debug ~fortran +hl +mpi +pic +shared +szip ~threadsafe

###
### CONFIGURATION
###

# spack environments template (spack.yaml)
template_basic: 
  concretization: separately
  mirrors: {}
  repos: []
  upstreams: {}
  modules:
    enable: []
  definitions: []
  packages: {}
  config: 
    checksum: false
  specs: []
  view: false

# BUILD CONFIGURATION
# matched to the deploy file
bc-config: 
  config: &bc-config
    install_tree: /software/apps/spack/a02
    module_roots: 
      lmod: &module-spot /software/apps/spack/m02
    build_stage:
      - "$TMPDIR/$USER/spack-stage"
    misc_cache: /software/apps/spack/a02/cache_misc
  packages: &packages
    slurm:
      paths:
        slurm@17.11.12: /software/apps/slurm/17.11.12.1.marcc
      buildable: false
      version: []
      providers: {}
      modules: {}
      compiler: []
    openssl:
      paths: {openssl@1.0.2k: /usr}
      buildable: false
    curl:
      # r-curl bug ca 2020.02.08
      version: [7.63.0]

bc-config-modules:
  s01: &mod-stage-01
    enable: 
      - lmod
    lmod:
      all:
        conflict: []
        environment:
          unset: []
        filter:
          environment_blacklist: []
        load: []
      blacklist_implicits: false
      core_compilers:
      - *gcc-back-compiler
      hash_length: 0
      naming_scheme: '{name}/{version}/{compiler.name}/{compiler.version}'
      hierarchy:
      - compiler
      verbose: false

bc-config-modules:
  s01: &mod-stage-02
    enable: 
      - lmod
    lmod: &mod-stage-02-lmod
      all:
        conflict: []
        environment:
          unset: []
        filter:
          environment_blacklist: []
        load: []
      blacklist_implicits: true
      core_compilers:
      - *gcc-back-compiler
      blacklist: 
      - *gcc-back
      hash_length: 0
      hierarchy:
      - compiler
      - mpi
      verbose: false
      openmpi:
        environment:
          set:
            OMPI_MCA_mpi_warn_on_fork: '0'
          unset: []
        filter:
          environment_blacklist: []
        load: []
        conflict: []

mods_config:
  mods: &mc01
    config: *bc-config
    packages: *packages
    modules: *mod-stage-01
  mods: &mc02
    config: *bc-config
    packages: *packages
    modules: 
      enable: [lmod]
      lmod: 
        << : *mod-stage-02-lmod
        whitelist: *wl02

###
### ENVIRONMENTS
###

bc-prelim: 
  notes: Initial test before running a compiler build.
  envs:
    - find_compilers: null
    - check_compiler: *gcc-back-compiler
    - bootstrap: null
    - name: env-prelim
      via: template_basic
      mods: *mc01
      specs:
        - !str [zlib, *gcc-back, *arch]
        - !str [cmake, *gcc-back, *arch]

bc-gcc-7-compiler:
  notes: Compile gcc 7 for Blue Crab.
  envs:
    - find_compilers: null
    - check_compiler: *gcc-back-compiler
    - bootstrap: null
    - name: &env-gcc-7-compiler env-gcc-7-compiler
      via: template_basic
      mods: *mc01
      specs:
        - !str &gcc-7-out [*gcc-7-compiler, *gcc-back, *arch]
    - find: *gcc-7-compiler 
      name: *env-gcc-7-compiler

bc-stage01:
  notes: 
    Blue Crab base apps built on gcc7.
    This list was build sequentially during testing.
    See Ryan's notes up to 2020.02.08 for details.
    Note a failed attempt to use spack to supply deps for pdftools namely poppler.
    This failure was due to differences between spack poppler and target poppler-cpp.
  envs:
    - check_compiler: *gcc-7-compiler
    - name: &env-stage01 env-stage01
      via: template_basic
      mods: *mc02
      specs: &stage01-specs !merge_lists
        - [*gcc-7-out]
        # base python
        - [!str [*python-3, *gcc-7]]
        # base R 
        - [!str [*r36, *gcc-7]]
        # large set of R packages
        - !loopcat
          base: !strflush [" ^", *r36, *gcc-7]
          loop: *r-packages
        # singletons
        - !loopcat
          base: *gcc-7
          loop: *base-singletons
        # python-dependent codes using
        #! the following is temporarily deprecated
        #! - !loopcat
        #!   base: !strflush [*gcc-7, " ^/ebfaatj"]
        #!   loop: *python-deps

bc-stage02:
  notes: |
    Build OpenMPI and MPI-dependent applications.
    Note that we removed lmod refresh after making the production recipe.
    Build strategy: build openmpi and dependencies with proot on debug
    You must have libibverbs and MPI must work. Singularity is not enough.
    There is a curl fork bomb when using proot so use mirror.
    Use spack mirror create openblas to fetch things and then build live in proot.
    Currently we attach CUDA to MPI to make sure we accomodate cuda-aware MPI apps.
    Lammps below requires DPYTHON_EXECUTABLE when building in proot.
    Current MPI build is against spack at [bluecrab e047d7e]
  envs:
    - check_compiler: *gcc-7-compiler
    - name: &env-stage02 env-stage02
      via: template_basic
      mods: *mc02
      specs: &stage02-specs !merge_lists
        - *stage01-specs
        # openmpi builds here with cuda which can change for downstream
        # WARNING: build openmpi in proot
        - [!chain [*openmpi-3-1, &cuda9 "cuda@9.2.88"]]
        - !loopcat
          # openmpi carries cuda so we omit it from the loop
          base: !strflush [" ^", *openmpi-3-1, "^ ", *cuda9]
          loop: 
            - !str [*fftw38, *gcc-7]
            - !chain
              - !str ["gromacs@2019.2 +cuda simd=AVX2_256", *gcc-7]
              - *fftw38
            - *hdf5-v01
            - !chain
              - *netcdf-c-v01
              - *hdf5-v01
            - !chain
              # note that we had to patch spack to set the right python
              # when building in proot via: DPYTHON_EXECUTABLE
              - !str [*lammps-v01, *gcc-7]
              - *python-3
              - *hdf5-v01
              - *netcdf-c-v01
              - *fftw38

###
### PRODUCTION
### 

production:
  notes: |
    Complete spack build for production.
    Remember to rsync this to production.
    This recipe is best for finalizing modules.
    We recommend adding software in the stages above.
  envs:
    - check_compiler: *gcc-7-compiler
    - name: &env-production env-production
      via: template_basic
      mods: *mc02
      specs: *stage02-specs
    - lmod_refresh: null
      name: *env-production
    # we keep the nested openmpi with hashes for clarity
    # otherwise use: lmod_hide_nested: *module-spot
    # removing hashes failed via: lmod_remove_nested_hashes
    - lmod_hooks:
      # use of the original module facilitates loading via `ml -stack`
      - moduleroot: *module-spot
        modulefile: linux-centos7-x86_64/Core/original.lua
        contents: !strflush
          - 'execute{cmd="echo [STATUS] Loading the original modules. If you added '
          - 'stack to your default modules, you cannot go back to original modules '
          - 'without deleting your lmod cache. && export MODULEPATH='
          - '/software/lmod/modulefiles/compiler_and_base:'
          - '/software/lmod/modulefiles/apps && ml restore",modeA={"load"}}'
      - mkdir: !strflush [*module-spot, '/linux-centos7-x86_64/Core/stack']
      - moduleroot: *module-spot
        modulefile: linux-centos7-x86_64/Core/stack/0.4.lua
        contents: !strflush 
          - 'help([[You are currently using the stack/0.4 module. '
          - 'This module provides a new set of software managed by Spack. '
          - 'To return to the original modules use ml original.]])'
          - "\n"
          - 'execute{cmd="echo [STATUS] Using the stack/0.4 module. '
          - 'To use original modules run ml original.",modeA={"load"}}'
          - "\n"
          - 'execute{cmd="echo [STATUS] Using the stack/0.4 module. '
          - 'To use original modules run ml original",modeA={"unload"}}'
      - mkdir: !strflush [*module-spot, '/linux-centos7-x86_64/Core/marcc']
      - moduleroot: !strflush [*module-spot, '/linux-centos7-x86_64/Core/marcc']
        modulefile: 2020.02.lua
        # append paths to avoid slurm interference
        contents: !strflush
          - 'append_path("PATH","/software/apps/marcc/bin")'
          - "\n"
          - 'append_path("PATH","/software/apps/slurm/current/bin")'
          - "\n"
          - 'append_path("PATH","/software/apps/slurm/current/sbin")'
          - "\n"
          - 'append_path("MANPATH","/software/apps/slurm/current/share/man")'
          - "\n"
          - 'append_path("LD_LIBRARY_PATH","/software/apps/slurm/current/lib")'
          - "\n"
          - 'append_path("LD_LIBRARY_PATH","/software/apps/slurm/current/lib/slurm")'
          - "\n"
          - 'append_path("LIBRARY_PATH","/software/apps/slurm/current/lib")'
          - "\n"
          - 'append_path("LIBRARY_PATH","/software/apps/slurm/current/lib/slurm")'
      # the following modulefile connects to the original modules
      # note that this exists outside the test environment
      - mkdir: /software/lmod/modulefiles/apps/stack
      - moduleroot: /software/lmod/modulefiles/apps/stack
        modulefile: 0.4.lua
        contents: !strflush
          - 'help([[The "stack" module loads the new MARCC software modules. '
          - 'These modules are generated by Spack.]])'
          - "\n"
          - 'execute{cmd="echo [STATUS] Loading the stack/0.4 module. '
          - 'To use original modules run ml original. '
          - '&& export MODULEPATH='
          - '/software/apps/spack/m02/linux-centos7-x86_64/Core && '
          - 'ml purge && ml stack/0.4 && ml gcc/7.4.0 && ml openmpi",modeA={"load"}}'
          - "\n"
          - 'execute{cmd="echo [STATUS] Using the stack/0.4 module. '
          - 'To use original modules run ml original.",modeA={"unload"}}'
    - lmod_defaults:
      - !strflush [*module-spot,'/linux-centos7-x86_64/gcc/7.4.0/openmpi/3.1.5.lua']
      - !strflush [*module-spot,'/linux-centos7-x86_64/Core/gcc/7.4.0.lua']

